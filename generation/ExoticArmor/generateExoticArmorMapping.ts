import {
  formatStringForFile,
  getSerializableValue,
  getVal,
} from "@d2e/generation/utils";
import { ExoticArmor } from "@d2e/types/ExoticArmor";
import {
  EArmorSlotId,
  EArmorStatId,
  EDestinyClassId,
  EExpansionId,
} from "@d2e/types/IdEnums";

export const generateExoticArmorMapping = (
  exoticArmorItems: ExoticArmor[]
): string => {
  const enumsToSerialize = {
    armorSlotId: { enumDefinition: EArmorSlotId, enumName: "EArmorSlotId" },
    destinyClassId: {
      enumDefinition: EDestinyClassId,
      enumName: "EDestinyClassId",
    },
    intrinsicFocus: {
      enumDefinition: EArmorStatId,
      enumName: "EArmorStatId",
      isOptional: true,
    },
    expansionIdCampaignCompletionRequired: {
      enumDefinition: EExpansionId,
      enumName: "EExpansionId",
      isOptional: true,
    },
  };

  const serializedExoticArmorItems: Record<string, unknown>[] = [];
  exoticArmorItems.forEach((exoticArmorItem) => {
    const serializedExoticArmorItem = { ...exoticArmorItem } as Record<
      string,
      unknown
    >;
    Object.keys(enumsToSerialize).forEach((key) => {
      const isOptional = getVal(key, enumsToSerialize)?.isOptional ?? false;
      const serializedResult = getSerializableValue(
        getVal(key, exoticArmorItem),
        getVal(key, enumsToSerialize)?.enumDefinition,
        getVal(key, enumsToSerialize)?.enumName
      );
      if (isOptional && serializedResult === "SERIALIZEDnull") return;
      serializedExoticArmorItem[key] = serializedResult;
    });
    serializedExoticArmorItems.push(serializedExoticArmorItem);
  });

  const exoticArmorIdToExoticArmorMappingString =
    serializedExoticArmorItems.map(
      (exoticArmorItem) =>
        `[${exoticArmorItem.hash}]: ${JSON.stringify(
          exoticArmorItem,
          null,
          2
        )},`
    );

  const fileContents = `// This file is generated by the generateExoticArmor.ts script.
	// Do not manually make changes to this file.

	import { ExoticArmor } from "@d2e/types/ExoticArmor";
	import { EArmorSlotId, EDestinyClassId, EArmorStatId, EExpansionId } from "@d2e/types/IdEnums";

	export const ExoticArmorHashToExoticArmorMapping: Record<number, ExoticArmor> = {
		${exoticArmorIdToExoticArmorMappingString.join(" ")}
	}
	`;
  return formatStringForFile(fileContents);
};
